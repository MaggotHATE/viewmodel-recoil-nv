scn Vweapon

ref rVM_Weapon

float pSkill
float pStr
float wDam
float wSkillType
float wSkill
float wStr

float VMx
float VMy
float VMz

array_var DefTrans
float DefX
float DefY
float DefZ

float vVInt
float vHInt
float vWDamCoeff
float vWDamCoeffH
float vSCoeffV
float vSCoeffH
float vWInfV
float vWInfH
float vIsRand

float randn
float randWY
float randWZ
float Ystack

float HasInertia
float IsVats

float fixMult
float fixMultIS

float vVlowLim
float vVupLim
float vHlowLim
float vHupLim

float vConst
float vStrBased
float vSkillBased
float vWeight

float vISconst
float vISstrBonus
float vISskillBonus
float vISlimitMult

ref CurAm
ref CurAmEff 
ref CurWepProj 
int ii
float CurAmEffVal
float CurAmEffType
float projSpeed
float projDam

float vUseIndRec
string_var WeaponSname
string_var WeaponSnameHAS
float WeaponSnameHASX
float WSR_aggMastery
float vcIS

begin Function {rVM_Weapon}

	if IsPC1stPerson == 1
		; I have no idea how reading from ini files affects performance
		;so I've added this feature for convenience and POSSIBLE optimization
		if (GetINIFloat "Optimization:vDirectLoad" "VM_Recoil.ini") == 1
		
			set vVInt to GetINIFloat "General:vVerticalIntensity" "VM_Recoil.ini"
			set vHInt to GetINIFloat "General:vHorizontalIntensity" "VM_Recoil.ini"
			set vWDamCoeff to GetINIFloat "General:vWeaponDamageCoeff" "VM_Recoil.ini"
			set vWDamCoeffH to GetINIFloat "General:vWeaponDamageCoeffH" "VM_Recoil.ini"
			set vSCoeffV to GetINIFloat "Stats:vStrengthCoeffV" "VM_Recoil.ini"
			set vSCoeffH to GetINIFloat "Stats:vStrengthCoeffH" "VM_Recoil.ini"
			set vWInfV to GetINIFloat "Stats:vWeightInfluenceV" "VM_Recoil.ini"
			set vWInfH to GetINIFloat "Stats:vWeightInfluenceH" "VM_Recoil.ini"
			set vIsRand to GetINIFloat "Randomization:vIsRandomized" "VM_Recoil.ini"
			
			set vVlowLim to GetINIFloat "General:vVerticalLowerLimit" "VM_Recoil.ini"
			set vVupLim to GetINIFloat "General:vVerticalUpperLimit" "VM_Recoil.ini"
			set vHlowLim to GetINIFloat "General:vHorizontalLowerLimit" "VM_Recoil.ini"
			set vHupLim to GetINIFloat "General:vHorizontalUpperLimit" "VM_Recoil.ini"
			set IsVats to GetINIFloat "BUGFIXING:vVATSfix" "VM_Recoil.ini"
			set vUseIndRec to GetINIFloat "Individual:vUseIndividualRecoil" "VM_Recoil.ini"
			
		else
		
			set vVInt to VisuaModellRecoilQuest.vVerticalIntensity
			set vHInt to VisuaModellRecoilQuest.vHorizontalIntensity
			set vWDamCoeff to VisuaModellRecoilQuest.vWeaponDamageCoeff
			set vWDamCoeffH to VisuaModellRecoilQuest.vWeaponDamageCoeffH
			set vSCoeffV to VisuaModellRecoilQuest.vStrengthCoeffV
			set vSCoeffH to VisuaModellRecoilQuest.vStrengthCoeffH
			set vWInfV to VisuaModellRecoilQuest.vWeightInfluenceV
			set vWInfH to VisuaModellRecoilQuest.vWeightInfluenceH
			set vIsRand to VisuaModellRecoilQuest.vIsRandomized
			
			set vVlowLim to VisuaModellRecoilQuest.vVlowLim
			set vVupLim to VisuaModellRecoilQuest.vVupLim
			set vHlowLim to VisuaModellRecoilQuest.vHlowLim
			set vHupLim to VisuaModellRecoilQuest.vHupLim
			set IsVats to VisuaModellRecoilQuest.IsVats
			
		endif
		
		; PrintToConsole "vVInt is: %g" vVInt
		; PrintToConsole "vHInt is: %g" vHInt
		; PrintToConsole "vSCoeffV is: %g" vSCoeffV
		; PrintToConsole "vSCoeffH is: %g" vSCoeffH
		; PrintToConsole "vWInfV is: %g" vWInfV
		; PrintToConsole "vWInfH is: %g" vWInfH
		; PrintToConsole "vIsRand is: %g" vIsRand
		
		

		let pStr := player.getav strength
		if pStr < 0
			let pStr := 0
		elseif pStr > 11
			let pStr := 11
		endif
		
		let wSkillType := GetWeaponSkill rVM_Weapon
		let wSkill := GetWeaponRequiredSkill rVM_Weapon
		let wStr := GetWeaponRequiredStrength rVM_Weapon
		
		
		
		;PrintToConsole "wStr is: %g" wStr
		
		if vUseIndRec
			set WeaponSname to GetEditorID rVM_Weapon
			let WeaponSname :="WeaponVRecoil\" + WeaponSname + ".ini"
			let WeaponSnameHAS :="Config\" + WeaponSname
			let WeaponSnameHASX := FileExists $WeaponSnameHAS
			;Print "rVM_Weapon is: " + $WeaponSname
			;Print "WeaponSnameHAS is: " + $WeaponSnameHAS
			;Print "WeaponSnameHAS is: Config\WeaponVRecoil\WeapAKMS.ini"
			
			;Print "FileExists is: " + $WeaponSnameHASX
			;Print "vUseIndRec is: " + $vUseIndRec
		endif
		
		if wSkill < 5
			let wSkill := 5
		endif
		
		
		
		if wSkillType == 34
			let pSkill := player.getav energyweapons
		elseif wSkillType == 41
			let pSkill := player.getav guns
		elseif wSkillType == 33
			let pSkill := player.getav bigguns
		elseif wSkillType == 35
			let pSkill := player.getav explosives	
		endif
		
		if pSkill < 0
			let pSkill := 0
		elseif pSkill > 110
			let pSkill := 110
		endif
		
		;PrintToConsole "pSkill is: %g" pSkill
		
		let wDam := GetDamage rVM_Weapon
		;PrintToConsole "wDam is: %g" wDam
		let HasInertia := IsModLoaded "B42Inertia.esp"
		;PrintToConsole "B42Inertia is: %g" HasInertia
		;don't mind the var name, tried to replace damage with projectile params
		
		
		;PrintToConsole "randn is: %g" randn
		
		if wSkillType !=34 && wSkillType !=41 && wSkillType != 33 && wSkillType != 35
			let DefY := 0
			let DefX := 0
			let DefZ := 0
			
			;PrintToConsole "wSkillType is: %g" wSkillType
		else
			let vConst := 2 - GetWeaponIsAutomatic rVM_Weapon
			
			;PrintToConsole "GetNumAmmoEffects is: %g" ii
			; time to fiddle with explosive weapons
			if wSkillType == 35
				set CurWepProj to GetWeaponProjectile rVM_Weapon
				;let projDam := GetProjectileRefDamage
				
				let projSpeed := GetProjectileTraitNumeric CurWepProj 2
				let projDam := GetProjectileTraitNumeric CurWepProj 9
				
				;PrintToConsole "projDam is: %g" projDam
				;PrintToConsole "projSpeed is: %g" projSpeed
				
				let wDam *= projSpeed*projDam
			endif
			
			;PrintToConsole "wDam result is: %g" wDam
			
			if GetPCUsingIronSights
				let vISconst := GetINIFloat "Ironsights:vConstantCoefficient" "VM_Recoil.ini"
				;let vISstrBonus := GetINIFloat "Ironsights:vIronsightsStrengthBonus" "VM_Recoil.ini"
				let vISskillBonus := GetINIFloat "Ironsights:vIronsightsSkillBonus" "VM_Recoil.ini"
				let vISlimitMult := GetINIFloat "Ironsights:vIronsightsLimitsMultiplier" "VM_Recoil.ini"
				let vConst *= vISconst
				;let pStr += vISstrBonus - doesn't work for "front-heavy weapons" part formula, oops 
				let pSkill += vISskillBonus
				; and for the limits too
				let vVupLim *= vISlimitMult
				let vVlowLim *= vISlimitMult
				let vHupLim *= vISlimitMult
				let vHlowLim *= vISlimitMult
				
			endif
			let vStrBased := wStr/pStr ; min 0,091 max 10, -
			let vSkillBased := pSkill/wSkill ; min 0,05 max 22, +
			let vWeight := (GetWeight rVM_Weapon)/pStr
			
			; PrintToConsole "vConst is: %g" vConst
			;PrintToConsole "vStrBased is: %g" vStrBased
			;PrintToConsole "vSkillBased is: %g" vSkillBased
			; PrintToConsole "vWeight is: %g" vWeight
			
			;           constant part   strength-based part    damage and skill-based part     	weight-based part (heavy weapons climb less afaik - let's just assume they all are front-heavy)
			
			let WSR_aggMastery := 1/vSkillBased + vStrBased; - ( abs DefY + abs DefX + abs DefZ)
			;PrintToConsole "WSR_aggMastery is: %g" WSR_aggMastery
			
			if vUseIndRec && WeaponSnameHASX
				
				let DefY := GetINIFloat "PATTERN:Y" $WeaponSname
				let DefX := GetINIFloat "PATTERN:X" $WeaponSname
				let DefZ := GetINIFloat "PATTERN:Z" $WeaponSname
				
				
								
				
				if GetPCUsingIronSights
					let vcIS := GetINIFloat "PATTERN:cIS" $WeaponSname
					let DefY *= WSR_aggMastery*vcIS
					let DefX *= WSR_aggMastery*vcIS
					let DefZ *= WSR_aggMastery*vcIS
				else 
					let DefY *= WSR_aggMastery
					let DefX *= WSR_aggMastery
					let DefZ *= WSR_aggMastery
				endif
				
				;PrintToConsole "DefX is: %g" DefX
				;PrintToConsole "DefY is: %g" DefY
				;PrintToConsole "DefZ is: %g" DefZ
				
				let randn := GetINIFloat "PATTERN:dX" $WeaponSname
				if randn < 0 ; randomization left and right
					if getrandompercent > 50
						let randn *= -1
					endif
				else ; rand, but still to one side
					if getrandompercent > 50
						let randn := 1
					endif
				endif
				
				let randWY := GetINIFloat "PATTERN:dY" $WeaponSname
				if randWY < 0 ; pseudo constant recoil
					if getrandompercent/100 < -1*randWY
						let DefY := 0
					endif
				else  ; rand for one side, but a little
					if getrandompercent < 50
						let DefY := DefY + randWY
					endif
				endif
				
				let randWZ := GetINIFloat "PATTERN:dZ" $WeaponSname
				
				if randWZ < 0 ; rand
					if getrandompercent > 50
						let randWZ *= -1
						let DefZ *= randWZ
					endif
				else ; like Y
					if getrandompercent < 50
						let DefZ := DefZ + randWZ
					endif
				endif
				
				;PrintToConsole "DefY +randWY is: %g" DefY
				;PrintToConsole "randWZ is: %g" randWZ
				
			else
				if (GetINIFloat "Individual:vUseOldGenericFormula" "VM_Recoil.ini") == 1
					let DefY := vVInt*vConst + (vStrBased*vSCoeffV) + (vWDamCoeff*wDam - vSkillBased) - vWeight*vWInfV
					let DefX := vHInt*vConst + (vStrBased*vSCoeffH) + (vWDamCoeff*wDam - vSkillBased)*vWDamCoeffH + vWeight*vWInfH
				else
					let DefY := (vVInt*vConst + vWDamCoeff*wDam - vWeight*vWInfV)*WSR_aggMastery*vSCoeffV
					let DefX := (vHInt*vConst + vWDamCoeff*wDam*vWDamCoeffH + vWeight*vWInfH)*WSR_aggMastery*vSCoeffH
					;Print "DefY = " + $(vVInt*vConst) + " + " + $vSCoeffV + " + " + $(vWDamCoeff*wDam) + " - " + $(vWeight*vWInfV)
				endif
			
				if DefY > vVupLim 
					let DefY := vVupLim
				elseif DefY < vVlowLim
					let DefY := vVlowLim
				endif
				
				if DefX > vHupLim 
					let DefX := vHupLim
				elseif DefX < vHlowLim
					let DefX := vHlowLim
				endif			
				
				if (GetINIFloat "Randomization:vRotationAsVertical" "VM_Recoil.ini") == 0 
					let DefZ := DefX
				else
					let DefZ := DefY
				endif
				
				if vIsRand == 1
					let randn := getrandompercent
					if randn > 50
						let randn := 1
					else
						let randn := -1
					endif
				else
					let randn := 1
				endif
				
			
			endif
			
			let DefX *= randn
			
		endif
		
		
		; PrintToConsole "DefX is: %g" DefX
		; PrintToConsole "DefY is: %g" DefY
		; PrintToConsole "DefZ is: %g" DefZ
		
		
		;this is where we try to take B42 Inertia into account
		if HasInertia == 1
			if (FileExists "Config\B42Inertia.ini") && (GetINIFloat "Tuning:bRotationMode" "B42Inertia.ini") > 0
				let fixMult := 0.812
				let fixMultIS := 0.95
				;let DefZ := DefZ*0.2
			elseif (GetINIFloat "Tuning:bDebugMode" "B42Inertia.ini") == 0 ;this was only for debugging, I got tired of switching plugins off, sorry
				let fixMult := 0.814
				let fixMultIS := 0.814
				;PrintToConsole "fixMultIS is: %g" fixMultIS
			else
				let fixMult := 0.965
				let fixMultIS := 0.95
				;let DefZ := DefZ*-1
			endif
		else
			let fixMult := 0.814
			let fixMultIS := 0.814
			;PrintToConsole "fixMultIS is: %g" fixMultIS
			;let DefZ := DefZ*-1
		endif
		

		if (GetVATSMode <= 0) || IsVats == 0 ;an attempt to fix VATS-related bug, couldn't reproduce it though
			let VisuaModellRecoilQuest.DefA0 := VisuaModellRecoilQuest.DefA0 + DefX;*fixMult
			let VisuaModellRecoilQuest.DefA1 := VisuaModellRecoilQuest.DefA1 + DefY;*fixMult
			
			let VisuaModellRecoilQuest.DefA2 := VisuaModellRecoilQuest.DefA2 + DefZ;*randn;*fixMult
			
			let VisuaModellRecoilQuest.MinCount := fixMult
			let VisuaModellRecoilQuest.MinCountI := fixMultIS
			let VisuaModellRecoilQuest.timer := 0
		endif
		
		 ; PrintToConsole "VMy is: %g" VisuaModellRecoilQuest.VMy
		 ; PrintToConsole "VMz is: %g" VisuaModellRecoilQuest.VMz
		
		;old attempts - not compatible with inertia	
		; if GetPCUsingIronSights
			; let DefTrans := player.GetNifBlockRotation "Spine0Controller"
			; let VMx := DefTrans[0] - DefX*randn
			; let VMy := DefTrans[2] + DefY
			; let VMz := DefTrans[1] + DefX*randn;DefZ*randn*0.2
			; player.SetNifBlockRotation "Spine0Controller" VMx VMz VMy
		; else
			; let DefTrans := player.GetNifBlockRotation "NeckController"
			; let VMx := DefTrans[0] - DefX*randn
			; let VMy := DefTrans[2] + DefY
			; let VMz := DefTrans[1] + DefX*randn; DefZ*randn*0.2
			; player.SetNifBlockRotation "NeckController" VMx VMz VMy
		; endif
		
		;PrintToConsole "NeckController is: %g" DefTrans 2
	endif	
end