scn Vweapon

ref rWeapon

float pSkill
float pStr
float wDam
float wSkillType
float wSkill
float wStr

float VMx
float VMy
float VMz

array_var DefTrans
float DefX
float DefY
float DefZ

float vVInt
float vHInt
float vWDamCoeff
float vWDamCoeffH
float vSCoeffV
float vSCoeffH
float vWInfV
float vWInfH
float vIsRand

int randn

float projSpeed

float fixMult

ref CurAm  


begin Function {rWeapon}

	if IsPC1stPerson == 1
		; I have no idea how reading from ini files affects performance
		;so I've added this feature for convenience and POSSIBLE optimization
		if (GetINIFloat "Optimization:vDirectLoad" "VM_Recoil.ini") == 1
		
			set vVInt to GetINIFloat "General:vVerticalIntensity" "VM_Recoil.ini"
			set vHInt to GetINIFloat "General:vHorizontalIntensity" "VM_Recoil.ini"
			set vWDamCoeff to GetINIFloat "General:vWeaponDamageCoeff" "VM_Recoil.ini"
			set vWDamCoeffH to GetINIFloat "General:vWeaponDamageCoeffH" "VM_Recoil.ini"
			set vSCoeffV to GetINIFloat "Stats:vStrengthCoeffV" "VM_Recoil.ini"
			set vSCoeffH to GetINIFloat "Stats:vStrengthCoeffH" "VM_Recoil.ini"
			set vWInfV to GetINIFloat "Stats:vWeightInfluenceV" "VM_Recoil.ini"
			set vWInfH to GetINIFloat "Stats:vWeightInfluenceH" "VM_Recoil.ini"
			set vIsRand to GetINIFloat "Randomization:vIsRandomized" "VM_Recoil.ini"
			
		else
		
			set vVInt to VisuaModellRecoilQuest.vVerticalIntensity
			set vHInt to VisuaModellRecoilQuest.vHorizontalIntensity
			set vWDamCoeff to VisuaModellRecoilQuest.vWeaponDamageCoeff
			set vWDamCoeffH to VisuaModellRecoilQuest.vWeaponDamageCoeffH
			set vSCoeffV to VisuaModellRecoilQuest.vStrengthCoeffV
			set vSCoeffH to VisuaModellRecoilQuest.vStrengthCoeffH
			set vWInfV to VisuaModellRecoilQuest.vWeightInfluenceV
			set vWInfH to VisuaModellRecoilQuest.vWeightInfluenceH
			set vIsRand to VisuaModellRecoilQuest.vIsRandomized
			
		endif
		
		; PrintToConsole "vVInt is: %g" vVInt
		; PrintToConsole "vHInt is: %g" vHInt
		; PrintToConsole "vSCoeffV is: %g" vSCoeffV
		; PrintToConsole "vSCoeffH is: %g" vSCoeffH
		; PrintToConsole "vWInfV is: %g" vWInfV
		; PrintToConsole "vWInfH is: %g" vWInfH
		; PrintToConsole "vIsRand is: %g" vIsRand

		let pStr := player.getav strength
		if pStr < 0
			let pStr := 0
		elseif pStr > 11
			let pStr := 11
		endif
		
		let wSkillType := GetWeaponSkill rWeapon
		let wSkill := GetWeaponRequiredSkill rWeapon
		let wStr := GetWeaponRequiredStrength rWeapon
		
		
		;PrintToConsole "wStr is: %g" wStr
		
		if wSkill < 1
			let wSkill := 1
		endif
		
		
		if wSkillType == 34
			let pSkill := player.getav energyweapons
		elseif wSkillType == 41
			let pSkill := player.getav guns
		elseif wSkillType == 33
			let pSkill := player.getav bigguns
		elseif wSkillType == 35
			let pSkill := player.getav explosives	
		endif
		
		if pSkill < 0
			let pSkill := 0
		elseif pSkill > 110
			let pSkill := 110
		endif
		
		;PrintToConsole "pSkill is: %g" pSkill
		
		let wDam := GetDamage rWeapon
		let projSpeed := IsModLoaded "B42Inertia.esp"
		;PrintToConsole "B42Inertia is: %g" projSpeed
		;don't mind the var name, tried to replace damage with projectile params
		
		let randn := getrandompercent
		if randn > 50
			let randn := 1
		elseif vIsRand == 1
			let randn := -1
		endif
		
		if wSkillType !=34 && wSkillType !=41 && wSkillType != 33 && wSkillType != 35
			let DefY := 0
			let DefX := 0
			let DefZ := 0
			
			;PrintToConsole "wSkillType is: %g" wSkillType
		else
			;                        constant part                   strength-based part    damage and skill-based part                weight-based part (heavy weapons climb less afaik - let's just assume they all are front-heavy)
			let DefY := (vVInt*(2 - GetWeaponIsAutomatic rWeapon)) + (wStr*vSCoeffV/pStr) + vWDamCoeff*(wDam - wSkill/pSkill) - (GetWeight rWeapon)*(vWInfV/pStr)
			let DefX := (vHInt*(2 - GetWeaponIsAutomatic rWeapon)) + (wStr*vSCoeffH/pStr) + vWDamCoeff*(wDam*vWDamCoeffH - wSkill/pSkill) + (GetWeight rWeapon)*(vWInfH/pStr)
			
			if DefY > 6 ;no idea why 6, 5 seemed not enough
				let DefY := 6
			elseif DefY < 0.3
				let DefY := 0.3
			endif
			
			if DefX > 2 ;since horizontal movement is snappy, even 2 is too much
				let DefX := 2
			elseif DefX < 0.1
				let DefX := 0.1
			endif			
			
			if (GetINIFloat "Randomization:vRotationAsVertical" "VM_Recoil.ini") == 0
				let DefZ := DefX
			else
				let DefZ := DefY
			endif
			
			
		endif
		
		
		;PrintToConsole "DefX is: %g" DefX
		;PrintToConsole "DefY is: %g" DefY
		
		
		;this is where we try to take B42 Inertia into account
		if projSpeed == 1
			if (FileExists "Config\B42Inertia.ini") && (GetINIFloat "Tuning:bRotationMode" "B42Inertia.ini") > 0
				let fixMult := 0.812
				;let DefZ := DefZ*0.2
			else
				let fixMult := 0.95
				let DefZ := DefZ*-1
			endif
		else
			let fixMult := 0.814
			let DefZ := DefZ*-1
		endif
		
		;PrintToConsole "VMz is: %g" VisuaModellRecoilQuest.VMz
		
		let VisuaModellRecoilQuest.DefA0 := VisuaModellRecoilQuest.DefA0 + DefX*randn;*fixMult
		let VisuaModellRecoilQuest.DefA1 := VisuaModellRecoilQuest.DefA1 + DefY;*fixMult
		
		let VisuaModellRecoilQuest.DefA2 := VisuaModellRecoilQuest.DefA2 + DefZ;*randn;*fixMult
		
		let VisuaModellRecoilQuest.MinCount := fixMult
		let VisuaModellRecoilQuest.timer := 0
		
		;PrintToConsole "VMy is: %g" VisuaModellRecoilQuest.VMy
		;PrintToConsole "VMz is: %g" VisuaModellRecoilQuest.VMz
		
		;old attempts - not compatible with inertia	
		; if GetPCUsingIronSights
			; let DefTrans := player.GetNifBlockRotation "Spine0Controller"
			; let VMx := DefTrans[0] - DefX*randn
			; let VMy := DefTrans[2] + DefY
			; let VMz := DefTrans[1] + DefX*randn;DefZ*randn*0.2
			; player.SetNifBlockRotation "Spine0Controller" VMx VMz VMy
		; else
			; let DefTrans := player.GetNifBlockRotation "NeckController"
			; let VMx := DefTrans[0] - DefX*randn
			; let VMy := DefTrans[2] + DefY
			; let VMz := DefTrans[1] + DefX*randn; DefZ*randn*0.2
			; player.SetNifBlockRotation "NeckController" VMx VMz VMy
		; endif
		
		;PrintToConsole "NeckController is: %g" DefTrans 2
	endif	
end