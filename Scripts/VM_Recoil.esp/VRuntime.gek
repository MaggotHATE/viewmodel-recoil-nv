scn VRuntime

float VMx
float VMy
float VMz

float VMxI
float VMyI
float VMzI

float DefA0
float DefA1
float DefA2

float DefA0C
float DefA1C
float DefA2C

float MinCount
float MinCountI

float VM_tx
float VM_ty
float VM_tz

float VM_A1_0
float VM_A1_1
float VM_A1_2

int Fin

array_var DefRot
array_var DefTrans
array_var DefTransNEW
array_var DefRotIS
array_var FixedAmmos





float timer

float vVerticalIntensity
float vHorizontalIntensity
float vStrengthCoeffV
float vStrengthCoeffH
float vWeightInfluenceV
float vWeightInfluenceH
float vIsRandomized
float vWeaponDamageCoeff
float vWeaponDamageCoeffH

float xSpeed

float HipNode

float IS_Tick

float vVlowLim
float vVupLim
float vHlowLim
float vHupLim

float IsVats
float vUseIndRec
float vFirstShotMV
float vFirstShotMH
float vFirstShotR
float vFirstShotP
float vUseAmmoPseudo

float vRotationAsVertical

ref JustSprint
int JustIDX
int JustHas
short JustIs
short JustButton
short JustAnims

float VSx
float VSy
float VSz
float VSzT
float VSzTd

float IsSprintMod
float ToCamera

begin gamemode

	if getgameloaded
		
		let FixedAmmos := Ar_Construct "stringmap"
		
		SetOnFireWeaponEventHandler Vweapon 1 player
		
		set vVerticalIntensity to GetINIFloat "General:vVerticalIntensity" "VM_Recoil.ini"
		set vHorizontalIntensity to GetINIFloat "General:vHorizontalIntensity" "VM_Recoil.ini"
		set vWeaponDamageCoeff to GetINIFloat "General:vWeaponDamageCoeff" "VM_Recoil.ini"
		set vWeaponDamageCoeffH to GetINIFloat "General:vWeaponDamageCoeffH" "VM_Recoil.ini"
		set vStrengthCoeffV to GetINIFloat "Stats:vStrengthCoeffV" "VM_Recoil.ini"
		set vStrengthCoeffH to GetINIFloat "Stats:vStrengthCoeffH" "VM_Recoil.ini"
		set vWeightInfluenceV to GetINIFloat "Stats:vWeightInfluenceV" "VM_Recoil.ini"
		set vWeightInfluenceH to GetINIFloat "Stats:vWeightInfluenceH" "VM_Recoil.ini"
		set vIsRandomized to GetINIFloat "Randomization:vIsRandomized" "VM_Recoil.ini"
		set vRotationAsVertical to GetINIFloat "Randomization:vRotationAsVertical" "VM_Recoil.ini"
		
		set vVlowLim to GetINIFloat "General:vVerticalLowerLimit" "VM_Recoil.ini"
		set vVupLim to GetINIFloat "General:vVerticalUpperLimit" "VM_Recoil.ini"
		set vHlowLim to GetINIFloat "General:vHorizontalLowerLimit" "VM_Recoil.ini"
		set vHupLim to GetINIFloat "General:vHorizontalUpperLimit" "VM_Recoil.ini"
		set IsVats to GetINIFloat "BUGFIXING:vVATSfix" "VM_Recoil.ini"
		set vUseIndRec to GetINIFloat "Individual:vUseIndividualRecoil" "VM_Recoil.ini"
		set vUseAmmoPseudo to GetINIFloat "Stats:vUseAmmoPseudoCalc" "VM_Recoil.ini"
		set vFirstShotMV to GetINIFloat "Randomization:vFirstShotMultiplierV" "VM_Recoil.ini"
		set vFirstShotMH to GetINIFloat "Randomization:vFirstShotMultiplierH" "VM_Recoil.ini"
		set vFirstShotR to GetINIFloat "Randomization:vFirstShotRandomization" "VM_Recoil.ini"
		set vFirstShotP to GetINIFloat "Randomization:vFirstShotPeriod" "VM_Recoil.ini"
		
		;PrintToConsole "getgameloaded is: %g" vVerticalIntensity
		
		player.SetNifBlockRotation "NeckController" 0 0 0
		
		let HipNode := 0.1
		let IS_Tick := 0
		let xSpeed := 0
		
		let MinCount := 0.9
		let MinCountI := 0.95
		

	endif
	
	
	; if player.getdead || player.getisragdolled
		; player.SetNifBlockRotation "NeckController" 0 0 0
	; endif
	
	; let DefTransNEW := player.GetNifBlockRotation "Bip01 ThighsMain"
	; Print "DefTransNEW 0 is: " + $DefTransNEW[0]
	; Print "DefTransNEW 1 is: " + $DefTransNEW[1]
	; Print "DefTransNEW 2 is: " + $DefTransNEW[2]
	; let VMxI := DefTrans[0]*MinCountI + DefA0*MinCountI
	; let VMyI := DefTrans[2]*MinCountI + DefA1*MinCountI
	; let VMzI := DefTrans[1]*MinCountI - DefA2*MinCountI
	;player.SetNifBlockRotation "Bip01 ThighsMain" 0 0 0
	if IS_Tick > 0
		let IS_Tick *= MinCountI
		;Print "IS_Tick is: " + $IS_Tick
	endif
	if IS_Tick < 0.001
			let IS_Tick := 0
	endif
	


	
	
	if (IsPC1stPerson == 1 || IsModLoaded "CameraRecoil.esp") && (DefA0 != 0 || DefA1 != 0 || DefA2 != 0)
	
		if IsPC1stPerson == 1
			;let DefTrans := player.GetNifBlockRotation "InertiaController"
			; what?
			let DefTrans := player.GetNifBlockRotation "NeckController"
			let VMxI := DefTrans[0]*MinCountI + DefA0*MinCountI
			let VMyI := DefTrans[2]*MinCountI + DefA1*MinCountI
			let VMzI := DefTrans[1]*MinCountI - DefA2*MinCountI

			let VMx := DefTrans[0]*MinCount + DefA0*MinCount;*HipNode
			let VMy := DefTrans[2]*MinCount + DefA1*MinCount;*HipNode
			let VMz := DefTrans[1]*MinCount - DefA2*MinCount;*HipNode

		;this multiplier should slowly zero all rotation - but only if we stop firing
		;useless? probably, but movement feels less snappy monkaHmm

		
		
			if VMx < 0.00001 && VMx > -0.00001 
					let VMx := 0
			endif
			if VMy < 0.00001 && VMy > -0.00001 
				let VMy := 0
			endif
			if VMz < 0.00001 && VMz > -0.00001 
				let VMz := 0
			endif
			if VMxI < 0.00001 && VMxI > -0.00001 
					let VMxI := 0
			endif
			if VMyI < 0.00001 && VMyI > -0.00001 
				let VMyI := 0
			endif
			if VMzI < 0.00001 && VMzI > -0.00001 
				let VMzI := 0
			endif	
			
			if VMx > 10*MinCount
				set VMx to 10*MinCount
			elseif VMx < -10*MinCount
				set VMx to -10*MinCount
			endif
			if VMy > 6*MinCount
				set VMy to 6*MinCount
			endif
		
			if VMx > 10*MinCount
				let DefA0 := 0
			elseif VMx < -10*MinCount
				let DefA0 := 0
			endif
			if VMy > 6*MinCount
				let DefA1 := 0
			endif		
		
		endif

			if GetPCUsingIronSights
				; we don't need to adjust zeroing speed in ironsights. Probably.
				if IsPC1stPerson == 1
					player.SetNifBlockRotation "NeckController" VMxI VMzI VMyI
					;player.SetNifBlockRotation "InertiaController" VMxI VMzI VMyI
				endif
				let DefA0 := DefA0 * MinCountI
				let DefA1 := DefA1 * MinCountI
				let DefA2 := DefA2 * MinCountI
			else
				if IsPC1stPerson == 1
					player.SetNifBlockRotation "NeckController" VMx VMz VMy
					;player.SetNifBlockRotation "InertiaController" VMx VMz VMy
				endif
				let DefA0 := DefA0 * MinCount
				let DefA1 := DefA1 * MinCount
				let DefA2 := DefA2 * MinCount			
			endif			

		
		
		if DefA1 < 0.0001 && DefA1 > -0.0001 
			let DefA1 := 0
		endif
		if DefA0 < 0.0001 && DefA0 > -0.0001 
			let DefA0 := 0
		endif
		if DefA2 < 0.0001 && DefA2 > -0.0001 
			let DefA2 := 0
		endif
	
	endif

	
end

Begin MenuMode ;an attempt to fix VATS-related bug, couldn't reproduce it though
	If (MenuMode 1056) && IsVats > 0
		let DefA1 := 0
		let DefA0 := 0
		let DefA2 := 0
		;PrintToConsole "VATS"
		;player.SetNifBlockRotation "NeckController" 0 0 0
	endif	
end
