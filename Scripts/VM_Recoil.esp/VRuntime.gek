scn VRuntime

float VMx
float VMy
float VMz

float VMxI
float VMyI
float VMzI

float DefA0
float DefA1
float DefA2

float MinCount
float MinCountI

int Fin

array_var DefRot
array_var DefTrans
array_var DefRotIS

float timer

float vVerticalIntensity
float vHorizontalIntensity
float vStrengthCoeffV
float vStrengthCoeffH
float vWeightInfluenceV
float vWeightInfluenceH
float vIsRandomized
float vWeaponDamageCoeff
float vWeaponDamageCoeffH

float xSpeed

float HipNode

float IS_Tick

float vVlowLim
float vVupLim
float vHlowLim
float vHupLim

begin gamemode

	if getgameloaded && getgamerestarted
		
		SetOnFireWeaponEventHandler Vweapon 1 player
		
		set vVerticalIntensity to GetINIFloat "General:vVerticalIntensity" "VM_Recoil.ini"
		set vHorizontalIntensity to GetINIFloat "General:vHorizontalIntensity" "VM_Recoil.ini"
		set vWeaponDamageCoeff to GetINIFloat "General:vWeaponDamageCoeff" "VM_Recoil.ini"
		set vWeaponDamageCoeffH to GetINIFloat "General:vWeaponDamageCoeffH" "VM_Recoil.ini"
		set vStrengthCoeffV to GetINIFloat "Stats:vStrengthCoeffV" "VM_Recoil.ini"
		set vStrengthCoeffH to GetINIFloat "Stats:vStrengthCoeffH" "VM_Recoil.ini"
		set vWeightInfluenceV to GetINIFloat "Stats:vWeightInfluenceV" "VM_Recoil.ini"
		set vWeightInfluenceH to GetINIFloat "Stats:vWeightInfluenceH" "VM_Recoil.ini"
		set vIsRandomized to GetINIFloat "Randomization:vIsRandomized" "VM_Recoil.ini"
		
		set vVlowLim to GetINIFloat "General:vVerticalLowerLimit" "VM_Recoil.ini"
		set vVupLim to GetINIFloat "General:vVerticalUpperLimit" "VM_Recoil.ini"
		set vHlowLim to GetINIFloat "General:vHorizontalLowerLimit" "VM_Recoil.ini"
		set vHupLim to GetINIFloat "General:vHorizontalUpperLimit" "VM_Recoil.ini"
		
	endif
	
	

	
	if IsPC1stPerson == 1 && DefA0 != 0 && DefA1 != 0 && DefA2 != 0
		
		
		let IS_Tick += 1
		
		let DefTrans := player.GetNifBlockRotation "NeckController"
		let VMxI := DefTrans[0]*MinCountI + DefA0*MinCountI
		let VMyI := DefTrans[2]*MinCountI + DefA1*MinCountI
		let VMzI := DefTrans[1]*MinCountI - DefA2*MinCountI


		let DefRotIS := player.GetNifBlockRotation "Spine0Controller" ;so what if we want viewmodel walking movement? monkaHmm 
		; just an idea for now, first test were rather weird 
		
		
		;let DefTrans := player.GetNifBlockRotation "NeckController"
		let VMx := (DefTrans[0]*MinCount + DefA0*MinCount);*HipNode
		let VMy := (DefTrans[2]*MinCount + DefA1*MinCount);*HipNode
		let VMz := (DefTrans[1]*MinCount - DefA2*MinCount);*HipNode

		;this multiplier should slowly zero all rotation - but only if we stop firing
		;useless? probably, but movement feels less snappy monkaHmm
		;let MinCount := 0.9
		
		
		if VMx < 0.00001 && VMx > -0.00001 
				let VMx := 0
		endif
		if VMy < 0.00001 && VMy > -0.00001 
			let VMy := 0
		endif
		if VMz < 0.00001 && VMz > -0.00001 
			let VMz := 0
		endif
		if VMxI < 0.00001 && VMxI > -0.00001 
				let VMxI := 0
		endif
		if VMyI < 0.00001 && VMyI > -0.00001 
			let VMyI := 0
		endif
		if VMzI < 0.00001 && VMzI > -0.00001 
			let VMzI := 0
		endif	
		
		if VMx > 10*MinCount
			set VMx to 10*MinCount
		elseif VMx < -10*MinCount
			set VMx to -10*MinCount
		endif
		if VMy > 6*MinCount
			set VMy to 6*MinCount
		endif
		
		
		
		if GetPCUsingIronSights
			; we don't need to adjust zeroing speed in ironsights. Probably.
			player.SetNifBlockRotation "NeckController" VMxI VMzI VMyI
			let DefA0 := DefA0 * MinCountI
			let DefA1 := DefA1 * MinCountI
			let DefA2 := DefA2 * MinCountI
		else
			player.SetNifBlockRotation "NeckController" VMx VMz VMy
			let DefA0 := DefA0 * MinCount
			let DefA1 := DefA1 * MinCount
			let DefA2 := DefA2 * MinCount			
		endif
		
		
		if VMx > 10*MinCount
			let DefA0 := 0
		elseif VMx < -10*MinCount
			let DefA0 := 0
		endif
		if VMy > 6*MinCount
			let DefA1 := 0
		endif
		
		
		if DefA1 < 0.0001 && DefA1 > -0.0001 
			let DefA1 := 0
		endif
		if DefA0 < 0.0001 && DefA0 > -0.0001 
			let DefA0 := 0
		endif
		if DefA2 < 0.0001 && DefA2 > -0.0001 
			let DefA0 := 0
		endif
	endif

	
end