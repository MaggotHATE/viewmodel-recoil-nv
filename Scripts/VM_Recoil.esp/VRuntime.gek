scn VRuntime

float VMx
float VMy
float VMz

float VMxI
float VMyI
float VMzI

float VMxR
float VMyR
float VMzR

float VMxIR
float VMyIR
float VMzIR

float DefA0
float DefA1
float DefA2

float DefA0R
float DefA1R
float DefA2R

float DefA0C
float DefA1C
float DefA2C

float MinCount
float MinCountI
float MinCountR
float MinCountIR

float VM_tx
float VM_ty
float VM_tz

float VM_A1_0
float VM_A1_1
float VM_A1_2

int Fin

array_var DefRot
array_var DefTrans
array_var DefTransNEW
array_var DefRotIS
array_var FixedAmmos





float timer

float vVerticalIntensity
float vHorizontalIntensity
float vStrengthCoeffV
float vStrengthCoeffH
float vWeightInfluenceV
float vWeightInfluenceH
float vIsRandomized
float vWeaponDamageCoeff
float vWeaponDamageCoeffH

float xSpeed

float HipNode

float IS_Tick

float vVlowLim
float vVupLim
float vHlowLim
float vHupLim

float IsVats
float vUseIndRec
float vFirstShotMV
float vFirstShotMH
float vFirstShotR
float vFirstShotP
float vUseAmmoPseudo

float vRotationAsVertical
float vTiltCoefficient
float vRotCoefficient
float vTiltConstant
float vRotConstant

ref JustSprint
int JustIDX
int JustHas
short JustIs
short JustButton
short JustAnims

float VSx
float VSy
float VSz
float VSzT
float VSzTd

float IsSprintMod
float ToCamera

short isFixed

string_var ChosenController

short isLastShot

begin gamemode

	if getgameloaded
		
		let FixedAmmos := Ar_Construct "stringmap"
		
		SetOnFireWeaponEventHandler Vweapon 1 player
		
		set vVerticalIntensity to GetINIFloat "General:vVerticalIntensity" "VM_Recoil.ini"
		set vHorizontalIntensity to GetINIFloat "General:vHorizontalIntensity" "VM_Recoil.ini"
		set vWeaponDamageCoeff to GetINIFloat "General:vWeaponDamageCoeff" "VM_Recoil.ini"
		set vWeaponDamageCoeffH to GetINIFloat "General:vWeaponDamageCoeffH" "VM_Recoil.ini"
		set vStrengthCoeffV to GetINIFloat "Stats:vStrengthCoeffV" "VM_Recoil.ini"
		set vStrengthCoeffH to GetINIFloat "Stats:vStrengthCoeffH" "VM_Recoil.ini"
		set vWeightInfluenceV to GetINIFloat "Stats:vWeightInfluenceV" "VM_Recoil.ini"
		set vWeightInfluenceH to GetINIFloat "Stats:vWeightInfluenceH" "VM_Recoil.ini"
		set vIsRandomized to GetINIFloat "Randomization:vIsRandomized" "VM_Recoil.ini"
		set vRotationAsVertical to GetINIFloat "Randomization:vRotationAsVertical" "VM_Recoil.ini"
		
		set vVlowLim to GetINIFloat "General:vVerticalLowerLimit" "VM_Recoil.ini"
		set vVupLim to GetINIFloat "General:vVerticalUpperLimit" "VM_Recoil.ini"
		set vHlowLim to GetINIFloat "General:vHorizontalLowerLimit" "VM_Recoil.ini"
		set vHupLim to GetINIFloat "General:vHorizontalUpperLimit" "VM_Recoil.ini"
		set IsVats to GetINIFloat "BUGFIXING:vVATSfix" "VM_Recoil.ini"
		set vUseIndRec to GetINIFloat "Individual:vUseIndividualRecoil" "VM_Recoil.ini"
		set vUseAmmoPseudo to GetINIFloat "Stats:vUseAmmoPseudoCalc" "VM_Recoil.ini"
		set vFirstShotMV to GetINIFloat "Randomization:vFirstShotMultiplierV" "VM_Recoil.ini"
		set vFirstShotMH to GetINIFloat "Randomization:vFirstShotMultiplierH" "VM_Recoil.ini"
		set vFirstShotR to GetINIFloat "Randomization:vFirstShotRandomization" "VM_Recoil.ini"
		set vFirstShotP to GetINIFloat "Randomization:vFirstShotPeriod" "VM_Recoil.ini"
		
		set vTiltCoefficient to GetINIFloat "Movements:vTiltCoefficient" "VM_Recoil.ini"
		set vRotCoefficient to GetINIFloat "Movements:vRotCoefficient" "VM_Recoil.ini"
		set vTiltConstant to GetINIFloat "Movements:vTiltConstant" "VM_Recoil.ini"
		set vRotConstant to GetINIFloat "Movements:vRotConstant" "VM_Recoil.ini"
		
		;PrintToConsole "getgameloaded is: %g" vVerticalIntensity
		
		
		
		let HipNode := 0.1
		let IS_Tick := 0
		let xSpeed := 0
		
		let MinCount := 0.9
		let MinCountI := 0.95
		
		let ChosenController := "NeckController"
		
		player.SetNifBlockRotation ChosenController 0 0 0
	endif
	
	
	; if player.getdead || player.getisragdolled
		; player.SetNifBlockRotation "NeckController" 0 0 0
	; endif
	
	; let DefTransNEW := player.GetNifBlockRotation "Bip01 ThighsMain"
	; Print "DefTransNEW 0 is: " + $DefTransNEW[0]
	; Print "DefTransNEW 1 is: " + $DefTransNEW[1]
	; Print "DefTransNEW 2 is: " + $DefTransNEW[2]
	; let VMxI := DefTrans[0]*MinCountI + DefA0*MinCountI
	; let VMyI := DefTrans[2]*MinCountI + DefA1*MinCountI
	; let VMzI := DefTrans[1]*MinCountI - DefA2*MinCountI
	;player.SetNifBlockRotation "Bip01 ThighsMain" 0 0 0
	if IS_Tick > 0
		let IS_Tick *= MinCountI
		;Print "IS_Tick is: " + $IS_Tick
	endif
	if IS_Tick < 0.001
			let IS_Tick := 0
	endif
	


	
	
	if (IsPC1stPerson == 1 || IsModLoaded "CameraRecoil.esp") && (DefA0 != 0 || DefA1 != 0 || DefA2 != 0 || DefA0R != 0 || DefA2R != 0 || DefA1R != 0)
	
		let isFixed := 0
		
		if IsPC1stPerson == 1
			;let DefTrans := player.GetNifBlockRotation "InertiaController"
			; what?
			let DefTrans := player.GetNifBlockRotation "NeckController"
			let VMxI := DefTrans[0]*MinCountI + DefA0*MinCountI
			let VMyI := DefTrans[2]*MinCountI + DefA1*MinCountI
			let VMzI := DefTrans[1]*MinCountI - DefA2*MinCountI

			let VMx := DefTrans[0]*MinCount + DefA0*MinCount;*HipNode
			let VMy := DefTrans[2]*MinCount + DefA1*MinCount;*HipNode
			let VMz := DefTrans[1]*MinCount - DefA2*MinCount;*HipNode

		;this multiplier should slowly zero all rotation - but only if we stop firing
		;useless? probably, but movement feels less snappy monkaHmm

		
		
			if VMx < 0.00001 && VMx > -0.00001 
					let VMx := 0
			endif
			if VMy < 0.00001 && VMy > -0.00001 
				let VMy := 0
			endif
			if VMz < 0.00001 && VMz > -0.00001 
				let VMz := 0
			endif
			if VMxI < 0.00001 && VMxI > -0.00001 
					let VMxI := 0
			endif
			if VMyI < 0.00001 && VMyI > -0.00001 
				let VMyI := 0
			endif
			if VMzI < 0.00001 && VMzI > -0.00001 
				let VMzI := 0
			endif	
			
			if VMx > 10*MinCount
				set VMx to 10*MinCount
			elseif VMx < -10*MinCount
				set VMx to -10*MinCount
			endif
			if VMy > 6*MinCount
				set VMy to 6*MinCount
			endif
		
			if VMx > 10*MinCount
				let DefA0 := 0
			elseif VMx < -10*MinCount
				let DefA0 := 0
			endif
			if VMy > 6*MinCount
				let DefA1 := 0
			endif

			;------------------Inertia
			
			
			let DefTransNEW := player.GetNifBlockRotation "InertiaController"
			let VMxIR := DefTransNEW[0]*MinCountIR + DefA0R*MinCountIR
			let VMyIR := DefTransNEW[2]*MinCountIR + DefA1R*MinCountIR
			let VMzIR := DefTransNEW[1]*MinCountIR - DefA2R*MinCountIR

			let VMxR := DefTransNEW[0]*MinCountR + DefA0R*MinCountR
			let VMyR := DefTransNEW[2]*MinCountR + DefA1R*MinCountR
			let VMzR := DefTransNEW[1]*MinCountR - DefA2R*MinCountR			
			
			if VMxR < 0.00001 && VMxR > -0.00001 
				let VMxR := 0
			endif
			if VMyR < 0.00001 && VMyR > -0.00001 
				let VMyR := 0
			endif
			if VMzR < 0.00001 && VMzR > -0.00001 
				let VMzR := 0
			endif
			if VMxIR < 0.00001 && VMxIR > -0.00001 
				let VMxIR := 0
			endif
			if VMyIR < 0.00001 && VMyIR > -0.00001 
				let VMyIR := 0
			endif
			if VMzIR < 0.00001 && VMzIR > -0.00001 
				let VMzIR := 0
			endif	
			
			if VMxR > 10*MinCountR
				set VMxR to 10*MinCountR
			elseif VMxR < -10*MinCountR
				set VMxR to -10*MinCountR
			endif
			if VMyR > 6*MinCountR
				set VMyR to 6*MinCountR
			endif
		
			if VMxR > 10*MinCountR
				let DefA0R := 0
			elseif VMxR < -10*MinCountR
				let DefA0R := 0
			endif
			if VMyR > 6*MinCount
				let DefA1R := 0
			endif			
		endif

		if GetPCUsingIronSights
			; we don't need to adjust zeroing speed in ironsights. Probably.
			;if IsPC1stPerson == 1
			player.SetNifBlockRotation "NeckController" VMxI VMzI VMyI
			player.SetNifBlockRotation "InertiaController" VMxIR VMzIR VMyIR
				;player.SetNifBlockRotation "InertiaController" VMxI VMzI VMyI
			;endif
			let DefA0 := DefA0 * MinCountI
			let DefA1 := DefA1 * MinCountI
			let DefA2 := DefA2 * MinCountI
			let DefA0R := DefA0R * MinCountIR
			let DefA1R := DefA1R * MinCountIR
			let DefA2R := DefA2R * MinCountIR
			
		else
			;if IsPC1stPerson == 1
			player.SetNifBlockRotation"NeckController" VMx VMz VMy
			player.SetNifBlockRotation "InertiaController" VMxR VMzR VMyR
				;player.SetNifBlockRotation "InertiaController" VMx VMz VMy
			;endif	
			let DefA0 := DefA0 * MinCount
			let DefA1 := DefA1 * MinCount
			let DefA2 := DefA2 * MinCount
			let DefA0R := DefA0R * MinCountR
			let DefA1R := DefA1R * MinCountR
			let DefA2R := DefA2R * MinCountR
			
		endif			

		
		
		if DefA1 < 0.0001 && DefA1 > -0.0001 
			let DefA1 := 0
		endif
		if DefA0 < 0.0001 && DefA0 > -0.0001 
			let DefA0 := 0
		endif
		if DefA2 < 0.0001 && DefA2 > -0.0001 
			let DefA2 := 0
		endif
		
		if DefA1R < 0.0001 && DefA1R > -0.0001 
			let DefA1R := 0
		endif
		if DefA0R < 0.0001 && DefA0R > -0.0001 
			let DefA0R := 0
		endif
		if DefA2R < 0.0001 && DefA2R > -0.0001 
			let DefA2R := 0
		endif
		
		; print "-----------------------------"
		; print "DefA0="+$DefA0 +" " + $VMx
		; print "DefA1="+$DefA1 +" " + $VMy
		; print "DefA2="+$DefA2 +" " + $VMz
		
	elseif isFixed == 0 && (DefA0 == 0 || DefA1 == 0 || DefA2 == 0) && (VMx != 0 || VMy != 0 || VMz != 0) 
		if MinCount < MinCountR
			player.SetNifBlockRotation"NeckController" 0 0 0
		else
			player.SetNifBlockRotation "InertiaController" 0 0 0	
		endif
		let isFixed := 1
	endif

	
end

Begin MenuMode ;an attempt to fix VATS-related bug, couldn't reproduce it though
	If (MenuMode 1056) && IsVats > 0
		let DefA1 := 0
		let DefA0 := 0
		let DefA2 := 0
		;PrintToConsole "VATS"
		;player.SetNifBlockRotation "NeckController" 0 0 0
	endif	
end
